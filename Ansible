---
- name: AWS Management with Ansible
  hosts: localhost
  gather_facts: no
  tasks:
    - name: Ensure awscli is installed
      pip:
        name: awscli
        state: present

    - name: List route tables in the availability zone ap-south-1b
      community.aws.ec2_vpc_route_table_facts:
        region: ap-south-1
        filters:
          availabilityZone: ap-south-1b
      register: route_tables

    - name: Display route tables
      debug:
        msg: "{{ route_tables.route_tables }}"

    - name: List subnets with tags 'web' or 'db'
      community.aws.ec2_vpc_subnet_facts:
        region: ap-south-1
      register: subnets

    - name: Filter subnets with tags 'web' or 'db'
      set_fact:
        filtered_subnets: >
          {{
            subnets.subnets | selectattr('tags', 'defined') | selectattr('tags', 'match', 'web|db') | list
          }}

    - name: Display filtered subnets
      debug:
        msg: "{{ filtered_subnets }}"
______________________________________________________________________________________________________

---
- name: AWS Management with Ansible
  hosts: localhost
  gather_facts: no
  vars:
    aws_access_key: YOUR_ACCESS_KEY
    aws_secret_key: YOUR_SECRET_KEY
    aws_session_token: YOUR_SESSION_TOKEN  # Optional, if using temporary credentials
    aws_region: us-east-1
  tasks:
    - name: Describe EC2 instances with uptime of at least 30 minutes
      community.aws.ec2_instance_facts:
        region: "{{ aws_region }}"
        filters:
          instance-state-name: running
      register: ec2_instances

    - name: Filter instances with uptime of at least 30 minutes
      set_fact:
        filtered_instances: >
          {{
            ec2_instances.instances | selectattr('launch_time', 'defined') | selectattr(
              'launch_time', 'search', '^.*?(\d+)$'
            ) | selectattr('launch_time', 'regex_replace', '^.*?(\d+)$', '\\1') | selectattr(
              'launch_time', 'regex_replace', '^.*?(\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}Z)$', '\\1'
            ) | selectattr('launch_time', 'version_compare', '<', (ansible_date_time.iso8601_basic | to_datetime('%Y%m%dT%H%M%S') - 1800)) | list
          }}

    - name: Display filtered EC2 instances
      debug:
        msg: "{{ filtered_instances }}"

    - name: Describe ELBs and display DNS names
      community.aws.elb_facts:
        region: "{{ aws_region }}"
      register: elbs

    - name: Display ELB DNS names
      debug:
        msg: "{{ elbs.load_balancers | map(attribute='DNSName') | list }}"

    - name: Describe Internet Gateways not attached to any VPC
      community.aws.ec2_internet_gateway_facts:
        region: "{{ aws_region }}"
      register: internet_gateways

    - name: Filter and display Internet Gateways not attached to any VPC
      set_fact:
        unattached_igws: >
          {{
            internet_gateways.internet_gateways | selectattr('attachments', 'defined') | selectattr('attachments', 'length', 0) | list
          }}

    - name: Display unattached Internet Gateways
      debug:
        msg: "{{ unattached_igws }}"
????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????

---
- name: Manage AWS Resources
  hosts: localhost
  gather_facts: no
  vars_prompt:
    - name: vpc_id
      prompt: "Enter the VPC ID"
      private: no

    - name: subnet_ids
      prompt: "Enter subnet IDs (comma-separated)"
      private: no

    - name: route_table_ids
      prompt: "Enter route table IDs (comma-separated)"
      private: no

    - name: internet_gateway_id
      prompt: "Enter the Internet Gateway ID"
      private: no

  tasks:
    - name: Disable auto-assign IP address on subnets
      community.aws.ec2_vpc_subnet:
        region: us-east-1
        subnet_id: "{{ item }}"
        auto_assign_public_ip: no
      loop: "{{ subnet_ids.split(',') }}"
      register: update_subnets

    - name: Disassociate subnets from route tables
      community.aws.ec2_vpc_route_table_facts:
        region: us-east-1
        route_table_ids: "{{ route_table_ids.split(',') }}"
      register: route_tables

    - name: Disassociate subnets from their route tables
      community.aws.ec2_vpc_route_table:
        region: us-east-1
        route_table_id: "{{ item.route_table_id }}"
        subnet_id: "{{ item.subnet_id }}"
        state: absent
      loop: "{{ route_tables.route_tables | flatten | map(attribute='associations') | flatten | map(attribute='subnet_id') | list | unique }}"
      when: item.subnet_id is defined

    - name: Delete route tables
      community.aws.ec2_vpc_route_table:
        region: us-east-1
        route_table_id: "{{ item }}"
        state: absent
      loop: "{{ route_table_ids.split(',') }}"
      when: item != 'default'

    - name: Delete subnets
      community.aws.ec2_vpc_subnet:
        region: us-east-1
        subnet_id: "{{ item }}"
        state: absent
      loop: "{{ subnet_ids.split(',') }}"

    - name: Detach Internet Gateway from VPC
      community.aws.ec2_internet_gateway:
        region: us-east-1
        internet_gateway_id: "{{ internet_gateway_id }}"
        vpc_id: "{{ vpc_id }}"
        state: detached

    - name: Delete Internet Gateway
      community.aws.ec2_internet_gateway:
        region: us-east-1
        internet_gateway_id: "{{ internet_gateway_id }}"
        state: absent

    - name: Delete VPC
      community.aws.ec2_vpc:
        region: us-east-1
        vpc_id: "{{ vpc_id }}"
        state: absent
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

---
- name: Provision and configure AWS instances
  hosts: localhost
  gather_facts: no
  vars:
    aws_region: us-east-1
    instance_type: t2.micro
    key_name: your_key_pair_name  # Replace with your key pair name
    security_group_id: sg-xxxxxxxx  # Replace with your security group ID
    subnet_id: subnet-xxxxxxxx  # Replace with your subnet ID
    public_ami: ami-xxxxxxxx  # Replace with your AMI ID for the public instance
    private_ami: ami-xxxxxxxx  # Replace with your AMI ID for the private instance
    public_instance_name: public_instance
    private_instance_name: private_instance
    public_instance_id: ""
    private_instance_id: ""

  tasks:
    - name: Launch public EC2 instance
      community.aws.ec2:
        region: "{{ aws_region }}"
        image: "{{ public_ami }}"
        instance_type: "{{ instance_type }}"
        key_name: "{{ key_name }}"
        security_groups: "{{ security_group_id }}"
        subnet_id: "{{ subnet_id }}"
        assign_public_ip: yes
        wait: yes
        count: 1
      register: public_instance

    - name: Set public instance ID
      set_fact:
        public_instance_id: "{{ public_instance.instances[0].id }}"

    - name: Launch private EC2 instance
      community.aws.ec2:
        region: "{{ aws_region }}"
        image: "{{ private_ami }}"
        instance_type: "{{ instance_type }}"
        key_name: "{{ key_name }}"
        security_groups: "{{ security_group_id }}"
        subnet_id: "{{ subnet_id }}"
        wait: yes
        count: 1
        block_device_mappings:
          - device_name: /dev/xvda
            ebs:
              volume_size: 8
          - device_name: /dev/xvdb
            ebs:
              volume_size: 2
      register: private_instance

    - name: Set private instance ID
      set_fact:
        private_instance_id: "{{ private_instance.instances[0].id }}"

    - name: Configure public instance with Apache and PHP
      ansible.builtin.shell: |
        ssh -o StrictHostKeyChecking=no -i "{{ key_name }}.pem" ec2-user@{{ public_instance.public_ip_address }} "sudo yum update -y && sudo yum install -y httpd php && sudo systemctl start httpd && sudo systemctl enable httpd"
      delegate_to: localhost

    - name: Configure private instance with MariaDB
      ansible.builtin.shell: |
        ssh -o StrictHostKeyChecking=no -i "{{ key_name }}.pem" ec2-user@{{ private_instance.public_ip_address }} "sudo yum update -y && sudo yum install -y mariadb-server && sudo systemctl start mariadb && sudo systemctl enable mariadb"
      delegate_to: localhost

    - name: Verify Apache installation on public instance
      ansible.builtin.shell: |
        ssh -o StrictHostKeyChecking=no -i "{{ key_name }}.pem" ec2-user@{{ public_instance.public_ip_address }} "curl http://localhost"
      delegate_to: localhost

    - name: Verify MariaDB installation on private instance
      ansible.builtin.shell: |
        ssh -o StrictHostKeyChecking=no -i "{{ key_name }}.pem" ec2-user@{{ private_instance.public_ip_address }} "mysql --version"
      delegate_to: localhost
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

---
- name: Manage AWS EC2 Instances
  hosts: localhost
  gather_facts: no
  vars_prompt:
    - name: instance_ids
      prompt: "Enter the instance IDs (comma-separated)"
      private: no

    - name: new_volume_size
      prompt: "Enter the size of the new EBS volume (GB)"
      private: no

  tasks:
    - name: Describe existing EC2 instances
      community.aws.ec2_instance_facts:
        region: us-east-1
        instance_ids: "{{ instance_ids.split(',') }}"
      register: instance_facts

    - name: Modify instance tag (name) for each instance
      community.aws.ec2_tag:
        region: us-east-1
        resource_id: "{{ item.id }}"
        tags:
          Name: "{{ item.id }}-modified"
        state: present
      loop: "{{ instance_facts.instances }}"
      when: instance_facts.instances | length > 0

    - name: Create a new EBS volume
      community.aws.ec2_vol:
        region: us-east-1
        volume_size: "{{ new_volume_size }}"
        volume_type: gp2
        state: present
      register: new_volume

    - name: Attach the new EBS volume to the first instance
      community.aws.ec2_vol:
        region: us-east-1
        volume_id: "{{ new_volume.volume_id }}"
        instance_id: "{{ instance_facts.instances[0].id }}"
        device_name: /dev/xvdf
        state: attached

    - name: Reboot instances with tags starting with "app"
      community.aws.ec2_instance:
        region: us-east-1
        instance_ids: "{{ item.id }}"
        state: rebooted
      loop: "{{ instance_facts.instances }}"
      when: item.tags.Name is defined and item.tags.Name.startswith('app')

    - name: Terminate all instances
      community.aws.ec2_instance:
        region: us-east-1
        instance_ids: "{{ instance_ids.split(',') }}"
        state: absent
      when: instance_ids | length > 0
