pip install boto3


import boto3

def list_ec2_instances():
    # Using resource method
    ec2_resource = boto3.resource('ec2')
    print("Instances (using resource method):")
    for instance in ec2_resource.instances.all():
        print(f"Instance ID: {instance.id}, State: {instance.state['Name']}")
    
    # Using client method
    ec2_client = boto3.client('ec2')
    response = ec2_client.describe_instances()
    print("\nInstances (using client method):")
    for reservation in response['Reservations']:
        for instance in reservation['Instances']:
            print(f"Instance ID: {instance['InstanceId']}, State: {instance['State']['Name']}")

def list_s3_buckets():
    # Using resource method
    s3_resource = boto3.resource('s3')
    print("\nS3 Buckets (using resource method):")
    for bucket in s3_resource.buckets.all():
        print(f"Bucket Name: {bucket.name}")
    
    # Using client method
    s3_client = boto3.client('s3')
    response = s3_client.list_buckets()
    print("\nS3 Buckets (using client method):")
    for bucket in response['Buckets']:
        print(f"Bucket Name: {bucket['Name']}")

if __name__ == "__main__":
    list_ec2_instances()
    list_s3_buckets()

_______________________________________________________


aws configure --profile myprofile

[profile myprofile]
output = table


aws s3 ls --profile myprofile

aws ec2 describe-instances --profile myprofile


#################################################################################


import boto3
from botocore.exceptions import NoCredentialsError, PartialCredentialsError
import time

# Initialize the AWS clients
ec2 = boto3.client('ec2')
s3 = boto3.client('s3')

# Define instance configurations
public_instance_config = {
    'ImageId': 'ami-xxxxxxxx',  # Replace with the desired AMI ID
    'InstanceType': 't2.micro',
    'KeyName': 'your-key-pair',  # Replace with your key pair
    'SecurityGroupIds': ['sg-xxxxxxxx'],  # Replace with your security group ID
    'MinCount': 1,
    'MaxCount': 1,
    'UserData': """#!/bin/bash
        apt-get update
        apt-get install -y apache2 php
        systemctl start apache2
        systemctl enable apache2
    """
}

private_instance_config = {
    'ImageId': 'ami-xxxxxxxx',  # Replace with the desired AMI ID
    'InstanceType': 't2.micro',
    'KeyName': 'your-key-pair',  # Replace with your key pair
    'SecurityGroupIds': ['sg-xxxxxxxx'],  # Replace with your security group ID
    'MinCount': 1,
    'MaxCount': 1,
    'BlockDeviceMappings': [
        {
            'DeviceName': '/dev/sda1',
            'Ebs': {
                'VolumeSize': 8  # Default size
            }
        },
        {
            'DeviceName': '/dev/xvdb',
            'Ebs': {
                'VolumeSize': 4  # Application data volume size
            }
        }
    ],
    'UserData': """#!/bin/bash
        apt-get update
        apt-get install -y mysql-server
        systemctl start mysql
        systemctl enable mysql
    """
}

def create_instance(config):
    try:
        response = ec2.run_instances(**config)
        instance_id = response['Instances'][0]['InstanceId']
        print(f"Instance {instance_id} launched")
        return instance_id
    except (NoCredentialsError, PartialCredentialsError) as e:
        print(f"Error: {e}")
        return None

def wait_for_instance_running(instance_id):
    print(f"Waiting for instance {instance_id} to start...")
    ec2.get_waiter('instance_running').wait(InstanceIds=[instance_id])
    print(f"Instance {instance_id} is running")

def check_instance_status(instance_id):
    response = ec2.describe_instances(InstanceIds=[instance_id])
    instance = response['Reservations'][0]['Instances'][0]
    print(f"Instance ID: {instance_id}")
    print(f"Public IP: {instance.get('PublicIpAddress', 'N/A')}")
    print(f"Private IP: {instance.get('PrivateIpAddress', 'N/A')}")
    print(f"Instance State: {instance['State']['Name']}")

def main():
    print("Creating public instance...")
    public_instance_id = create_instance(public_instance_config)
    if public_instance_id:
        wait_for_instance_running(public_instance_id)
        check_instance_status(public_instance_id)
    
    print("Creating private instance...")
    private_instance_id = create_instance(private_instance_config)
    if private_instance_id:
        wait_for_instance_running(private_instance_id)
        check_instance_status(private_instance_id)

if __name__ == "__main__":
    main()

--------------------------------------------------------------------

import boto3
from botocore.exceptions import NoCredentialsError, PartialCredentialsError

# Initialize the AWS EC2 client
ec2 = boto3.client('ec2')

def tag_instance(instance_id, tag_name, tag_value):
    try:
        ec2.create_tags(
            Resources=[instance_id],
            Tags=[{'Key': tag_name, 'Value': tag_value}]
        )
        print(f"Instance {instance_id} tagged with {tag_name} = {tag_value}")
    except (NoCredentialsError, PartialCredentialsError) as e:
        print(f"Error: {e}")

def create_and_attach_volume(instance_id, volume_size):
    try:
        # Create a new EBS volume
        volume = ec2.create_volume(
            AvailabilityZone='us-east-1a',  # Replace with the appropriate AZ
            Size=volume_size,
            VolumeType='gp2'
        )
        volume_id = volume['VolumeId']
        print(f"Created EBS volume {volume_id} with size {volume_size}GB")

        # Wait for the volume to be available
        ec2.get_waiter('volume_available').wait(VolumeIds=[volume_id])
        print(f"Volume {volume_id} is now available")

        # Attach the volume to the instance
        ec2.attach_volume(
            VolumeId=volume_id,
            InstanceId=instance_id,
            Device='/dev/xvdf'  # Replace with appropriate device name if necessary
        )
        print(f"Attached volume {volume_id} to instance {instance_id}")
    except (NoCredentialsError, PartialCredentialsError) as e:
        print(f"Error: {e}")

def reboot_instance(instance_id):
    try:
        ec2.reboot_instances(InstanceIds=[instance_id])
        print(f"Reboot command sent to instance {instance_id}")
    except (NoCredentialsError, PartialCredentialsError) as e:
        print(f"Error: {e}")

def terminate_all_instances():
    try:
        # List all instances
        response = ec2.describe_instances()
        instances = [i['InstanceId'] for r in response['Reservations'] for i in r['Instances']]

        if not instances:
            print("No instances to terminate.")
            return

        # Terminate all instances
        ec2.terminate_instances(InstanceIds=instances)
        print(f"Termination command sent for instances: {instances}")
    except (NoCredentialsError, PartialCredentialsError) as e:
        print(f"Error: {e}")

def main():
    # Example instance IDs
    instance_ids = ['i-xxxxxxxxxxxxxxxxx', 'i-yyyyyyyyyyyyyyyyy']  # Replace with your instance IDs

    # Modify instance tags
    for instance_id in instance_ids:
        tag_instance(instance_id, 'Name', 'NewInstanceName')

    # Create and attach a new EBS volume to the first instance
    create_and_attach_volume(instance_ids[0], 2)

    # Reboot a specific instance (e.g., the first instance)
    reboot_instance(instance_ids[0])

    # Terminate all instances
    terminate_all_instances()

if __name__ == "__main__":
    main()

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

import boto3

# Initialize the EC2 client
ec2_client = boto3.client('ec2')

# Define user data for Apache, PHP, and MySQL/MariaDB installation
public_instance_user_data = """#!/bin/bash
yum update -y
yum install -y httpd
systemctl start httpd
systemctl enable httpd
yum install -y php
"""

private_instance_user_data = """#!/bin/bash
yum update -y
yum install -y mysql-server
systemctl start mysqld
systemctl enable mysqld
"""

# Create a public EC2 instance with Apache and PHP
public_instance = ec2_client.run_instances(
    ImageId='ami-0c55b159cbfafe1f0',  # Replace with your desired AMI ID
    InstanceType='t2.micro',          # Replace with your desired instance type
    KeyName='your-key-pair-name',      # Replace with your EC2 Key Pair name
    MinCount=1,
    MaxCount=1,
    UserData=public_instance_user_data,
    AssociatePublicIpAddress=True,     # Public IP address
    TagSpecifications=[{
        'ResourceType': 'instance',
        'Tags': [{'Key': 'Name', 'Value': 'PublicInstance'}]
    }]
)

public_instance_id = public_instance['Instances'][0]['InstanceId']
print(f"Public EC2 instance created with ID: {public_instance_id}")

# Create a private EC2 instance with EBS volumes
private_instance = ec2_client.run_instances(
    ImageId='ami-0c55b159cbfafe1f0',  # Replace with your desired AMI ID
    InstanceType='t2.micro',          # Replace with your desired instance type
    KeyName='your-key-pair-name',      # Replace with your EC2 Key Pair name
    MinCount=1,
    MaxCount=1,
    UserData=private_instance_user_data,
    AssociatePublicIpAddress=False,    # Private IP address
    TagSpecifications=[{
        'ResourceType': 'instance',
        'Tags': [{'Key': 'Name', 'Value': 'PrivateInstance'}]
    }]
)

private_instance_id = private_instance['Instances'][0]['InstanceId']
print(f"Private EC2 instance created with ID: {private_instance_id}")

# Create EBS volumes
root_volume = ec2_client.create_volume(
    Size=8,  # Default size for root volume
    AvailabilityZone='us-east-1a',  # Replace with the correct availability zone
    VolumeType='gp2'
)

data_volume = ec2_client.create_volume(
    Size=4,  # Size for application data
    AvailabilityZone='us-east-1a',  # Replace with the correct availability zone
    VolumeType='gp2'
)

print(f"Root EBS volume created with ID: {root_volume['VolumeId']}")
print(f"Data EBS volume created with ID: {data_volume['VolumeId']}")

# Attach EBS volumes to the private instance
ec2_client.attach_volume(
    VolumeId=root_volume['VolumeId'],
    InstanceId=private_instance_id,
    Device='/dev/sda1'  # Root volume device name
)

ec2_client.attach_volume(
    VolumeId=data_volume['VolumeId'],
    InstanceId=private_instance_id,
    Device='/dev/sdf'  # Application data volume device name
)

print("EBS volumes attached to the private instance.")

# You will need to use an SSH client to log into the instances and verify configurations.
# For example, use `ssh` command to connect and check the setup.

print("Instances created and configured. Please SSH into the instances to verify.")

-----------------------------------------------------------------------------------------------------

import boto3

# Initialize the EC2 client
ec2_client = boto3.client('ec2')

def modify_instance_name(instance_id, new_name):
    ec2_client.create_tags(
        Resources=[instance_id],
        Tags=[{'Key': 'Name', 'Value': new_name}]
    )
    print(f"Instance {instance_id} renamed to {new_name}")

def create_and_attach_ebs_volume(instance_id, size=2):
    # Create a new EBS volume
    volume = ec2_client.create_volume(
        Size=size,
        AvailabilityZone='us-east-1a',  # Replace with the correct availability zone
        VolumeType='gp2'
    )
    volume_id = volume['VolumeId']
    print(f"EBS volume created with ID: {volume_id}")

    # Attach the EBS volume to the instance
    ec2_client.attach_volume(
        VolumeId=volume_id,
        InstanceId=instance_id,
        Device='/dev/sdg'  # Choose an appropriate device name
    )
    print(f"EBS volume {volume_id} attached to instance {instance_id}")

def reboot_instance(instance_id):
    ec2_client.reboot_instances(InstanceIds=[instance_id])
    print(f"Instance {instance_id} is rebooting.")

def terminate_all_instances():
    # Describe all instances
    instances = ec2_client.describe_instances()
    instance_ids = [instance['InstanceId'] for reservation in instances['Reservations'] for instance in reservation['Instances']]
    
    # Terminate all instances
    ec2_client.terminate_instances(InstanceIds=instance_ids)
    print(f"Terminated instances: {instance_ids}")

# Replace these with your actual instance IDs
instance_id_to_modify = 'i-0abcdef1234567890'  # Replace with your instance ID
instance_id_to_attach_volume = 'i-0abcdef1234567890'  # Replace with your instance ID

# Example usage
modify_instance_name(instance_id_to_modify, 'NewInstanceName')
create_and_attach_ebs_volume(instance_id_to_attach_volume)
reboot_instance(instance_id_to_modify)
terminate_all_instances()
